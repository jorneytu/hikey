#include <config.h>
#include <macro.h>


vector:
.quad(_vectors)

_bss_start:
.quad(__bss_start)

_bss_end:
.quad(__bss_end)

_TEXT_BASE:
.quad(TEXT_BASE)

.global start
start:
	b reset

// default chip reset at EL3 mode
reset:
	ldr x0, vector
	msr	vbar_el3, x0
	msr vbar_el2, x0
	msr	vbar_el1, x0

	mrs	x0, scr_el3
	orr	x0, x0, #0xf
	msr	scr_el3, x0

	// FP / SIMD Enable

	msr cptr_el3, xzr
	msr cptr_el2, xzr

#ifdef CORTEXA
	mrs x0, S3_1_c15_c2_1
	orr x0, x0, #(1 << 6)   // Set the SMPEN
	msr S3_1_c15_c2_1, x0
#endif


#ifdef CONFIG_ARMV8_MULTI


	branch_if_master x0, x1, master_cpu
slave_cpu:

	//
	// Setup GICD perCPU
	//
	wfi
	b .
master_cpu:
	//
	// Setup GICD
	//

#else

	//
	// Setup GICD
	//

#endif

	mov x0, x0

#ifdef CONFIG_ARMV8_EL1
	drop_to_el1
#endif

arm_primary:


	//
	// Enable GICD
	//

	//
	// Setup TLB Enable MMU & Cache
	//

stack_setup:
	ldr x0, _TEXT_BASE
	sub x0, x0, #CONFIG_SYS_STACK
	bic x0, x0, #0xf
	mov sp, x0



clear_bss:
	ldr x0, _bss_start
	ldr x1, _bss_end
clear_loop:
	str xzr, [x0]
	add x0, x0, #0x8
	cmp x0, x1
	b.lo clear_loop
	b main



